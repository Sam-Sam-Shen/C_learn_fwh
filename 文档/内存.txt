8字节内存字节对齐

int a = 1;
char s = 's';
int b = 2;
char c = 'c';

0000 0000 0000 0000 0000 0000 0000 0001
0000 0000 0000 0000 0000 0000 0000 0002
0000 0022 0000 000c

0000 0000 0000 0000 0000 0000 0000 0001
0000 0022 0000 000c
0000 0000 0000 0000 0000 0000 0000 0002

int a = 1;
char s;
char c;
int b = 2;

struct {
    int a;
    char s;
    char c;
    int b;
}jiegouti1;


0000 0000 0000 0000 0000 0000 0000 0001
0000 0022 0000 0000 0000 0000 0000 0000
0000 0002 0000 000c

string s = "hello world";
int long short 

经常使用的变量类型
unsighed int 无符号整数
long long
unsighed long
size_t # 兼容跨平台
time_t
int64_t
int32_t

=======================
平台无关性：size_t 的大小会根据平台（32位或64位）自动调整。在32位系统中，size_t 通常是4字节；在64位系统中，size_t 通常是8字节。这使得代码在不同平台上都能正确处理大小和索引。
避免溢出：使用 size_t 可以避免在处理大数组或容器时出现溢出问题。
标准库一致性：C和C++标准库广泛使用 size_t，因此使用它可以使代码与标准库保持一致

编译链接顺序: 预编译头文件，编译头文件，编译源文件，链接(静态链接库，动态链接库) -》《程序员的自我修养—链接、装载与库》

反码：反码是为了解决原码加减法的问题而提出的。正数的反码与原码相同，负数的反码是将原码的数值部分逐位取反
原码：直观看到的
补码：计算机内部实际使用的表示方法